# Copyright (C) 2000, 2001, 2004, 2007, 2008, 2010-2017  Internet Systems Consortium, Inc. ("ISC")
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

srcdir =	@srcdir@
VPATH =		@srcdir@
top_srcdir =	@top_srcdir@

VERSION=@BIND9_VERSION@

@BIND9_MAKE_INCLUDES@

SUBDIRS =	dlzexternal dyndb pipelined rndc rpz rsabigexponent tkey

CINCLUDES =	${ISC_INCLUDES} ${DNS_INCLUDES}

CDEFINES =	@USE_GSSAPI@
CWARNINGS =

DNSLIBS =
ISCLIBS =	../../../lib/isc/libisc.@A@ @ISC_OPENSSL_LIBS@

DNSDEPLIBS =
ISCDEPLIBS =

DEPLIBS =

LIBS =		@LIBS@

OBJS =		feature-test.@O@
SRCS =		feature-test.c

TARGETS =	feature-test@EXEEXT@

@BIND9_MAKE_RULES@

feature-test@EXEEXT@: feature-test.@O@
	${LIBTOOL_MODE_LINK} ${PURIFY} ${CC} ${CFLAGS} ${LDFLAGS} -o $@ feature-test.@O@ ${ISCLIBS} ${LIBS}


# Running the scripts below is bypassed when a separate # build directory is
# used.

# Define the tests that can be run in parallel.  This should be identical to
# the definition of PARALLELDIRS in conf.sh.  These tests do not use query
# port 5300 or control port 9953.

PARALLEL = allow_query catz serve-stale rpzrecurse

# Produce intermediate makefile that assigns unique port numbers to each
# parallel test.  The sequential tests all use ports 5300 (for queries) and
# 9953 (for control).  For this reason, the parallel tests start at port
# # 10,000

parallel.mk:
	@echo ".PHONY: $(PARALLEL)" > $@ ; \
	echo "" >> $@ ; \
	echo "check: $(PARALLEL)" >> $@ ; \
	port=9990 ; \
	for directory in $(PARALLEL) ; do \
		port=$$(($$port + 10)) ; \
		echo "" >> $@ ; \
		echo "$$directory:" >> $@ ; \
		echo "	@$(SHELL) ./run.sh -p $$port $$directory" >> $@ ; \
	done

# Targets to run the tests that can be done in parallel (which have unique
# ports assigned to them) and the tests which must be run sequentially (because
# they all use query port 5300 and control port 9953).

parallel: parallel.mk
	@$(MAKE) -f parallel.mk

sequential:
	@if test -f ./runall.sh; then $(SHELL) ./runall.sh; fi

# Standard targets.

check: test

test: parallel sequential

testclean clean distclean::
	if test -f ./cleanall.sh; then sh ./cleanall.sh; fi
	rm -f systests.output
	rm -f random.data
	rm -f parallel.mk
	rm -f ${TARGETS}
	rm -f ${OBJS}

distclean::
	rm -f conf.sh

installdirs:

install::

uninstall::
